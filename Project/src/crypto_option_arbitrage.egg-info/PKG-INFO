Metadata-Version: 2.4
Name: crypto_option_arbitrage
Version: 0.1.0
Summary: Arbitrage Opportunity Finder for Crypto Options using Clean Architecture
Author-email: Sajad <you@example.com>
Requires-Python: >=3.10
Description-Content-Type: text/markdown

<div dir='rtl'>

# 📘 مستند شروع پروژه

**عنوان پروژه**: کشف فرصت آربیتراژ در آپشن‌های کریپتو
**نام توسعه‌دهنده**: سجاد (Quant Dev)
**تاریخ شروع**: تیر ۱۴۰۴

---

## 🧭 ۱. هدف کلان پروژه

کشف و گزارش فرصت‌های آربیتراژ در بازار آپشن‌های رمزارز (مانند BTC و ETH)، به‌صورت بلادرنگ یا بر اساس داده‌های تاریخی.

---

## 🎯 ۲. اهداف جزئی

| شماره | هدف                                                                     |
| ----- | ----------------------------------------------------------------------- |
| 1     | دریافت بلادرنگ قیمت‌های آپشن از اکسچنج‌هایی مانند Deribit و Binance     |
| 2     | بررسی فرصت‌های آربیتراژ بین آپشن و دارایی پایه یا بین دو آپشن (کال/پوت) |
| 3     | تحلیل سود خالص با در نظر گرفتن کارمزد، اسپرد و Slippage                 |
| 4     | نمایش گزارش‌های فرصت‌ها به صورت API یا داشبورد                          |
| 5     | ذخیره‌سازی فرصت‌ها جهت تحلیل‌های بعدی و یادگیری مدل‌ها                  |
| 6     | پیاده‌سازی تست خودکار، معماری مقیاس‌پذیر و ایمن                         |

---

## 🏗️ 3. معماری پیشنهادی: Clean Architecture

</div>

``` bash
project_root/
├── core/                # موجودیت‌های دامنه و قوانین بنیادین
│   ├── entities/        # Option, ArbitrageOpportunity
│   └── value_objects/   # Volatility, Premium, Greeks
├── use_cases/           # منطق کشف فرصت آربیتراژ
│   └── detect_arbitrage.py
├── interfaces/          
│   ├── api/             # FastAPI برای ارائه سرویس
│   ├── cli/             # اجرای دستی از خط فرمان
│   └── scheduler/       # اجرای زمان‌بندی‌شده
├── infrastructure/      
│   ├── data_providers/  # ارتباط با Deribit و Binance
│   ├── db/              # ذخیره دیتا در Mongo/Postgres
│   └── notifiers/       # ارسال هشدارها یا گزارش‌ها
├── config/              # تنظیمات پروژه و کلیدهای API
├── tests/               # تست واحد و یکپارچه
└── main.py              # نقطه ورود
```

<div dir='rtl'>
---

## 🧰 4. ابزارها و تکنولوژی‌ها

| دسته                 | ابزار                                                    |
| -------------------- | -------------------------------------------------------- |
| زبان برنامه‌نویسی    | Python 3.11+                                             |
| معماری               | Clean Architecture                                       |
| API / Web            | FastAPI                                                  |
| دیتابیس              | PostgreSQL (برای داده پایدار) + Redis (برای کشف بلادرنگ) |
| Data Ingestion       | WebSocket و REST (اکسچنج‌ها)                             |
| Time-Series Analysis | Pandas, Numpy                                            |
| Test                 | Pytest                                                   |
| Docker               | Docker + Docker Compose                                  |
| Deployment           | Linux-based Server, GitHub Actions                       |
| Monitoring           | (در آینده: Prometheus/Grafana)                           |

---

## 📡 5. روش دریافت داده‌ها

| اکسچنج          | روش                             | توضیح                                        |
| --------------- | ------------------------------- | -------------------------------------------- |
| Deribit         | WebSocket و REST                | استفاده از Stream برای real-time Option data |
| Binance Options | REST API                        | دریافت زنجیره قیمت و مشخصات                  |
| سایر منابع      | OpenInterest APIs, Market Depth | در فاز دوم برای بهبود دقت مدل                |

---

## 📊 6. طرح‌های پیشنهادی اولیه برای Use Case

| طرح                       | شرح                                                   |
| ------------------------- | ----------------------------------------------------- |
| ✅ ساده‌ترین حالت          | دریافت Call و Put و مقایسه با قیمت پایه BTC           |
| 🧠 آربیتراژ دو اکسچنج     | بررسی تفاوت قیمت یک Option در دو اکسچنج               |
| 🧩 آربیتراژ بین Greeks    | بررسی mispricing با توجه به Delta و Vega              |
| 💼 آپشن استراتژی آربیتراژ | ترکیب استراتژی‌هایی مانند Synthetic Long و Conversion |

---

## 🔐 7. مدیریت امنیت و توکن‌های API

* ذخیره کلید API در `.env`
* استفاده از `python-dotenv` یا `pydantic.BaseSettings`
* جداسازی کامل بین محیط توسعه و Production

---

## ⏱ 8. نحوه اجرای پروژه

### Development

```bash
# اجرای پروژه
python main.py

# تست ماژول‌ها
pytest tests/
```

### Production (Docker)

```bash
docker-compose up --build
```

---

## 🧪 9. مسیر تست و بررسی نتایج

* ذخیره فرصت‌ها در پایگاه داده
* ارائه API مثل `/api/opportunities/last`
* اجرای تست‌های unit روی ماژول‌های `ArbitrageDetector`, `OptionEntity`

---

آیا مایلی این مستند به‌صورت فایل PDF/Markdown هم تولید شود؟
و گام بعدی را شروع کنیم (مثل طراحی مدل `Option` و `ArbitrageOpportunity` در پوشه `core/entities`)؟
